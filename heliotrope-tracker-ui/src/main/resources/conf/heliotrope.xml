<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd">
<Configure id="FileServer" class="org.eclipse.jetty.server.Server">

	<!-- 
	Connector with the port number and initial communication settings. Any SSL requirements
	will need to be set up here, and the port number ought to be exposed so it can be
	configured externally. 
	-->
	<Call name="addConnector">
		<Arg>
			<New class="org.eclipse.jetty.server.nio.SelectChannelConnector">
				<Set name="port">8888</Set>
			</New>
		</Arg>
	</Call>
	
	<Get class="org.eclipse.jetty.util.log.Log" name="log">
    	<Call name="setDebugEnabled">
        	<Arg type="boolean">true</Arg>
    	</Call>
	</Get>
	
	<!-- 
	Initial handler list. This maps any service war files to various appropriate parts of the URL space,
	and handles static files independently for the front end. 
	-->
	<Set name="handler">
		<New class="org.eclipse.jetty.server.handler.HandlerList">
			<Set name="handlers">
				<Array type="org.eclipse.jetty.server.Handler">
				
					<!-- 
					Sets up a handler for the war file delivering the tracker service. The reference here ought to
					be adjusted to something that is created through a multiproject build process, but that's a 
					relatively nasty thing to set up in sbt, as it is in Maven. It could easily be part of the
					Debian packaging side, too. This is good for development, and will suffice for now. 
					-->
					
					<Item>
<!-- 						<New class="org.eclipse.jetty.server.handler.ContextHandler">
							<Set name="contextPath">/tracker/api</Set>
							<Set name="handler">
								<New class="org.eclipse.jetty.server.handler.DebugHandler"/>
							</Set>
						</New>
 -->  			
 						<New class="org.eclipse.jetty.webapp.WebAppContext">
							<Set name="contextPath">/tracker/api</Set>
							<Set name="war">../heliotrope-tracker-service/target/scala-2.9.1/heliotrope-tracker-service_2.9.1-0.1.war</Set>
						</New>
					</Item>
					
					<!-- 
					Sets up a rewrite handler that wraps the static file management. The rewrite handler manages 
					stuff under /assets and /app and directs those to static files. All other requests are mapped
					to /index.htm, which drags in the JavaScript using require.js.
					-->
					<Item>
						<New id="RewriteHandler" class="org.eclipse.jetty.rewrite.handler.RewriteHandler">
					        <Set name="rewriteRequestURI">true</Set>
					        <Set name="rewritePathInfo">true</Set>
					        <Set name="originalPathAttribute">requestedPath</Set>
					        
					        <Set name="handler">
					        
					        	<!-- 
					        	The delegated handler for static files. These are served from /www, which in sbt terms 
					        	are managed resources. 
					        	-->
						        <New class="org.eclipse.jetty.server.handler.ContextHandler">
									<Set name="contextPath">/</Set>
									<Set name="handler">
									   <New class="org.eclipse.jetty.server.handler.ResourceHandler">
									   
											<Set name="resourceBase">src/main/webapp</Set>
											
											<Set name="welcomeFiles">
												<Array type="java.lang.String">
													<Item>index.html</Item>
												</Array>
											</Set>
							           </New>
									</Set>
								</New>
					        </Set>
					      
					      	<!-- 
					      	The rewrite rules for the RewriteHandler - these are only applied to requests
					      	against the static files. 
					      	-->
					        <Set name="rules">
					            <Array type="org.eclipse.jetty.rewrite.handler.Rule">
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(/assets/.*)</Set>
						                <Set name="replacement">$1</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(/templates/.*)</Set>
						                <Set name="replacement">$1</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(/app/.*)</Set>
						                <Set name="replacement">$1</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(/build/.*)</Set>
						                <Set name="replacement">$1</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(/test/.*)</Set>
						                <Set name="replacement">$1</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					         	    <Item>
						                <New class="org.eclipse.jetty.rewrite.handler.RewriteRegexRule">
						                <Set name="regex">(.*)</Set>
						                <Set name="replacement">/index.html</Set>
						                <Set name="terminating">true</Set>
						               </New>
					         	    </Item>
					            </Array>
					        </Set>
						</New>
					</Item>
				</Array>
			</Set>
		</New>
	</Set>

</Configure>
