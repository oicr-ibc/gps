# * compile - compiles source directory into target directory
# * watch   - watches any changes in your source directory and automatically compiles to the target directory
# * test    - runs mocha test framework
# * docs    - generates annotated documentation using docco-husky


fs = require 'fs'
{print} = require 'util'
{spawn, exec} = require 'child_process'

# ANSI Terminal Colors.
enableColors = no
unless process.platform is 'win32'
  enableColors = not process.env.NODE_DISABLE_COLORS

bold = red = green = reset = ''
if enableColors
  bold = '\x1B[0;1m'
  red = '\x1B[0;31m'
  green = '\x1B[0;32m'
  reset = '\x1B[0m'


# Cakefile Tasks

# ## *compile*
#
# Compiles Source
#
# <small>Usage</small>
#
# ```
# cake compile
# ```
task 'compile', 'compile styl -> css', -> compile_stylus -> log "stylus/*.styl => assets/stylesheets/style.css.", green

# ## *watch*
#
# Compiles source whenever it changes
#
# <small>Usages</small>
#
# ```
# cake watch:cs
# cake watch:styl
# ```
task 'watch', 'compile and watch styl -> css', -> compile_stylus true, -> log ":-)", green

# ## *docs*
#
# Generate Annotated Documentation
#
# <small>Usage</small>
#
# ```
# cake docs
# ```
task 'docs', 'generate documentation', -> docco()

# ## *test*
#
# Runs your test suite.
#
# <small>Usage</small>
#
# ```
# cake test
# ```
task 'test', 'run tests', -> mocha -> log "Testing Complete.", green


# Internal Functions

# ## *log* 
# 
# **given** string as a message
# **and** string as a color
# **and** optional string as an explaination
# **then** compiles a statement and logs to console.
log = (message, color, explanation) -> console.log color + message + reset + ' ' + (explanation or '')

# ## *launch*
#
# **given** string as a cmd
# **and** optional array and option flags
# **and** optional callback
# **then** spawn cmd with options
# **and** pipe to process stdout and stderr respectively
# **and** on child process exit emit callback if set and status is 0
launch = (cmd, options=[], callback) ->
  app = spawn cmd, options
  app.stdout.pipe(process.stdout)
  app.stderr.pipe(process.stderr)
  app.on 'exit', (status) -> callback?() if status is 0

# ## *compile_stylus*
#
# **given** optional boolean as watch
# **and** optional function as callback
# **then** invoke launch passing stylus command
# **and** defaulted options to compile stylus to public/css
compile_stylus = (watch, callback) ->
  if typeof watch is 'function'
    callback = watch
    watch = false

  exec 'touch assets/stylesheets/style.css'

  options = ['stylus', '-o', 'assets/stylesheets', '-u', 'nib', '-l']
  options.unshift '-w' if watch
  launch './node_modules/.bin/stylus', options, callback

# ## *mocha*
#
# **given** optional array of option flags
# **and** optional function as callback
# **then** invoke launch passing mocha command
mocha = (options, callback) ->
  if typeof options is 'function'
    callback = options 
    options = ['--compiler:coffeescript']
    
  launch 'mocha', options, callback

# ## *docco*
#
# **given** optional function as callback
# **then** invoke launch passing docco command
docco = (callback) ->
  launch 'docco-husky', ['coffee'], callback
